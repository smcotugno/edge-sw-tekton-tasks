apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-build-tag-push
  labels:
    version: 0.0.0
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: js-image
        default: docker.io/node:12-stretch
      - name: BUILDER_IMAGE
        default: quay.io/buildah/stable:v1.11.0
      - name: DOCKERFILE
        default: ./Dockerfile
      - name: CONTEXT
        default: .
      - name: TLSVERIFY
        default: "false"
  outputs:
    resources:
      - name: image
        type: image
  volumes:
    - name: varlibcontainers
      emptyDir: {}
  steps:
    - name: tag-release
      image: $(inputs.params.js-image)
      workingdir: $(inputs.resources.source.path)
      command: ["/bin/bash"]
      env:
        - name: BRANCH
          value: "$(inputs.resources.source.revision)"
        - name: GIT_AUTH_USER
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_AUTH_PWD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
      args:
        - -c
        - |
          set -e

          if [[ -z "$GIT_AUTH_USER" ]] || [[ -z "$GIT_AUTH_PWD" ]]; then
            echo "Git credentials not found. The pipeline expects to find them in a secret named 'git-credentials'."
            echo "  Update your CLI and register the pipeline again"
            exit 1
          fi

          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
          git fetch --unshallow
          git fetch --tags
          git tag -l

          git checkout ${BRANCH}
          git branch --set-upstream-to=origin/${BRANCH} ${BRANCH}

          git config --global user.email "cloud-native-toolkit@example.com"
          git config --global user.name "Cloud Native Toolkit Pipeline"

          if [[ "${BRANCH}" == "master" ]] && [[ $(git describe --tag `git rev-parse HEAD`) =~ (^[0-9]+.[0-9]+.[0-9]+$) ]] || \
             [[ $(git describe --tag `git rev-parse HEAD`) =~ (^[0-9]+.[0-9]+.[0-9]+-${BRANCH}[.][0-9]+$) ]]
          then
              echo "Latest commit is already tagged"
              echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" > ./env-config
              echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" >> ./env-config
              exit 0
          fi

          mkdir -p ~/.npm
          npm config set prefix ~/.npm
          export PATH=$PATH:~/.npm/bin
          npm i -g release-it

          if [[ "${BRANCH}" != "master" ]]; then
              PRE_RELEASE="--preRelease=${BRANCH}"
          fi


          release-it patch ${PRE_RELEASE} \
            --ci \
            --no-npm \
            --no-git.push \
            --no-git.requireCleanWorkingDir \
            --verbose \
            -VV

          git push --follow-tags -v

          echo "IMAGE_VERSION=$(git describe --abbrev=0 --tags)" > ./env-config
          echo "IMAGE_NAME=$(basename -s .git `git config --get remote.origin.url` | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')" >> ./env-config

          source ./env-config
          if [[ -z "${IMAGE_VERSION}" ]]; then
              echo "Error: IMAGE_VERSION not defined"
              exit 1
          fi
          if [[ -z "${IMAGE_NAME}" ]]; then
              echo "Error: IMAGE_NAME not defined"
              exit 1
          fi
    - name: build
      image: $(inputs.params.BUILDER_IMAGE)
      workingdir: $(inputs.resources.source.path)
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          IMAGE_URL=$(outputs.resources.image.url)

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')

          APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}"

          buildah bud --tls-verify=$(inputs.params.TLSVERIFY) --format=docker -f $(inputs.params.DOCKERFILE) -t ${APP_IMAGE}  $(inputs.params.CONTEXT)
          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
            buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi
          buildah push --tls-verify=$(inputs.params.TLSVERIFY) "${APP_IMAGE}" "docker://${APP_IMAGE}"
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: APIKEY
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        privileged: true
