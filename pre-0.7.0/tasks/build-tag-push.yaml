apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-build-tag-push
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: js-image
        default: docker.io/node:12-stretch
      - name: BUILDER_IMAGE
        default: quay.io/buildah/stable:v1.9.0
      - name: DOCKERFILE
        default: ./Dockerfile
      - name: CONTEXT
        default: .
      - name: TLSVERIFY
        default: "false"
  outputs:
    resources:
      - name: image
        type: image
  volumes:
    - name: varlibcontainers
      emptyDir: {}
  steps:
    - name: setup
      image: ${inputs.params.js-image}
      workingdir: ${inputs.resources.source.path}
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          # Export project name, version, and build number to ./env-config
          npm run env | grep "^npm_package_name" | sed "s/npm_package_name/APP_NAME/g"  > ./env-config
          npm run env | grep "^npm_package_version" | sed "s/npm_package_version/APP_VERSION/g" >> ./env-config
    - name: build
      image: ${inputs.params.BUILDER_IMAGE}
      workingdir: ${inputs.resources.source.path}
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          IMAGE_URL=${outputs.resources.image.url}

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')
          IMAGE_NAME=$(echo $IMAGE_URL | awk -F / '{print $3}' | awk -F : '{print $1}')
          HASTAG=$(echo $IMAGE_URL | awk -F / '{print $3}' | awk -F : '{print NF-1}')
          if [ "$HASTAG" = "1"  ]; then
              IMAGE_VERSION=$(echo $IMAGE_URL | awk -F / '{print $3}' | awk -F : '{print $2}')
          else
              IMAGE_VERSION=latest
          fi
          IMAGE_BUILD_VERSION="${APP_VERSION}-${IMAGE_VERSION}"

          APP_IMAGE_ID="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_BUILD_VERSION}"
          APP_IMAGE="${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${APP_VERSION}"

          buildah bud  --tls-verify=${inputs.params.TLSVERIFY} --format=docker -f ${inputs.params.DOCKERFILE} -t ${APP_IMAGE_ID}  ${inputs.params.CONTEXT}
          if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
            buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "${REGISTRY_URL}"
          fi
          buildah push --tls-verify=${inputs.params.TLSVERIFY} "${APP_IMAGE_ID}" "docker://${APP_IMAGE_ID}"
          buildah tag ${APP_IMAGE_ID} ${APP_IMAGE}
          buildah push --tls-verify=${inputs.params.TLSVERIFY} "${APP_IMAGE}" "docker://${APP_IMAGE}"
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: APIKEY
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        privileged: true
