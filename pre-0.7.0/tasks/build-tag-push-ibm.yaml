apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: igc-build-tag-push-ibm
spec:
  inputs:
    resources:
      - name: source
        type: git
    params:
      - name: js-image
        type: string
        default: docker.io/node:12-stretch
      - name: tools-image
        type: string
        default: docker.io/garagecatalyst/ibmcloud-dev:1.0.8
  outputs:
    resources:
      - name: image
        type: image
  steps:
    - name: setup
      image: ${inputs.params.js-image}
      workingdir: ${inputs.resources.source.path}
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e
          # Export project name, version, and build number to ./env-config
          npm run env | grep "^npm_package_name" | sed "s/npm_package_name/APP_NAME/g"  > ./env-config
          npm run env | grep "^npm_package_version" | sed "s/npm_package_version/APP_VERSION/g" >> ./env-config
    - name: build
      image: ${inputs.params.tools-image}
      workingdir: ${inputs.resources.source.path}
      envFrom:
        - configMapRef:
            name: ibmcloud-config
        - secretRef:
            name: ibmcloud-apikey
      env:
        - name: HOME
          value: /home/devops
      command: ["/bin/bash"]
      args:
        - -c
        - |
          set -e

          . ./env-config

          if [[ -z "${APIKEY}" ]]; then
            echo "APIKEY is required"
            exit 1
          fi

          if [[ -z "${RESOURCE_GROUP}" ]]; then
            echo "RESOURCE_GROUP is required"
            exit 1
          fi

          if [[ -z "${REGION}" ]]; then
            echo "REGION is required"
            exit 1
          fi

          if [[ -z "${APP_NAME}" ]]; then
            echo "APP_NAME is required from package.json"
            exit 1
          fi

          if [[ -z "${APP_VERSION}" ]]; then
            echo "APP_VERSION is required from package.json"
            exit 1
          fi

          IMAGE_URL=${outputs.resources.image.url}

          REGISTRY_URL=$(echo $IMAGE_URL | awk -F / '{print $1}')
          REGISTRY_NAMESPACE=$(echo $IMAGE_URL | awk -F / '{print $2}')
          HASTAG=$(echo $IMAGE_URL | awk -F / '{print $3}' | awk -F : '{print NF-1}')
          if [ "$HASTAG" = "1"  ]; then
              BUILD_NUMBER=$(echo $IMAGE_URL | awk -F / '{print $3}' | awk -F : '{print $2}')
          else
              BUILD_NUMBER=latest
          fi
          IMAGE_NAME=${APP_NAME}
          IMAGE_VERSION=${APP_VERSION}

          echo "Checking registry namespace: ${REGISTRY_NAMESPACE}"
          NS=$( ibmcloud cr namespaces | grep ${REGISTRY_NAMESPACE} ||: )
          if [[ -z "${NS}" ]]; then
              echo -e "Registry namespace ${REGISTRY_NAMESPACE} not found, creating it."
              ibmcloud cr namespace-add ${REGISTRY_NAMESPACE}
          else
              echo -e "Registry namespace ${REGISTRY_NAMESPACE} found."
          fi

          echo -e "Existing images in registry"
          ibmcloud cr images --restrict "${REGISTRY_NAMESPACE}/${IMAGE_NAME}"

          echo -e "=========================================================================================="
          echo -e "BUILDING CONTAINER IMAGE: ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}"

          ibmcloud cr build -t ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION} .
          echo -e "BUILDING CONTAINER IMAGE: ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-${BUILD_NUMBER}"
          ibmcloud cr image-tag ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION} ${REGISTRY_URL}/${REGISTRY_NAMESPACE}/${IMAGE_NAME}:${IMAGE_VERSION}-${BUILD_NUMBER}


          echo -e "Available images in registry"
          ibmcloud cr images --restrict ${REGISTRY_NAMESPACE}/${IMAGE_NAME}
